<launch>
<arg name="model" default="aquadrone_v2"/>
<arg name="param_name" default="robot_description"/>

  <!-- Vehicle's initial pose -->
  <arg name="x"     default="0"/>
  <arg name="y"     default="0"/>
  <arg name="z"     default="-5"/>
  <arg name="roll"  default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw"   default="0"/>

  <arg name="world_frame" default="world"/>

<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg model) -param $(arg param_name)"/>

<!-- Publish robot model for ROS -->
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
    <param name="robot_description" value="$(arg param_name)" />
</node>


<!-- Publish state and tf for in relation to the world frame -->
<node name="ground_truth_to_tf" pkg="message_to_tf" type="message_to_tf" output="screen">
  <param name="odometry_topic" value="/pose_gt" />
  <param name="frame_id" value="/$(arg world_frame)" />
  <param name="tf_prefix" value="" />
</node>

<rosparam  command="load" file="$(find aquadrone_description)/config/controls.yaml"/>

  <node name="controller_spawner"
    pkg="controller_manager"
    type="spawner"
    ns="aquadrone/internal"
    output="screen"
    args="joint_state_controller"/>

</launch>